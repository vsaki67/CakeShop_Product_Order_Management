/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Veiw;

import Model.Product;
import Controller.ProductController;

import Model.Order;
import Model.Order_DAO;
import Model.OrderItem;
import Model.OrderItem_DAO;
import Model.PlaceOrder;
import Model.PlaceOrder_DAO;
import Model.Customer;
import Model.Customer_DAO;
import Controller.OrderController;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;


public class OrderForm extends javax.swing.JFrame {

    private final OrderController controller;
    private JTextField totalTextField;

    
    public OrderForm() {
        controller = new OrderController();
        totalTextField = new JTextField();
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        orderID = new javax.swing.JTextField();
        orderDate = new javax.swing.JTextField();
        cmbCakeStz = new javax.swing.JComboBox<>();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        viewBtn = new javax.swing.JButton();
        clrBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cId = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cName = new javax.swing.JTextField();
        CNum = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        price1 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        userId = new javax.swing.JTextField();
        total = new javax.swing.JTextField();
        jSpinner1 = new javax.swing.JSpinner();
        searchCus = new javax.swing.JButton();
        S1Pro = new javax.swing.JButton();
        Cal = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        cmbPayMeth = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        cmbPayStatus = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        idOrderItem = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        cakeID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setPreferredSize(new java.awt.Dimension(880, 500));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setText("ORDER");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Order ID");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setText("Cake Status");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setText("Order Date");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setText("User ID");

        orderID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderIDActionPerformed(evt);
            }
        });

        cmbCakeStz.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "  ", "Pending", "Processed", "Completed", "Canceled", " ", " " }));

        addBtn.setBackground(new java.awt.Color(255, 255, 204));
        addBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        addBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\asusx\\OneDrive\\Desktop\\Project_Pic\\place order.png")); // NOI18N
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(255, 255, 204));
        updateBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        updateBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\asusx\\OneDrive\\Desktop\\Project_Pic\\view edit delete product.png")); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        viewBtn.setBackground(new java.awt.Color(255, 255, 204));
        viewBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        viewBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\asusx\\OneDrive\\Desktop\\Project_Pic\\search.png")); // NOI18N
        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        clrBtn.setBackground(new java.awt.Color(255, 255, 204));
        clrBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        clrBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\asusx\\OneDrive\\Desktop\\Project_Pic\\clear.png")); // NOI18N
        clrBtn.setText("Clear");
        clrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clrBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 255, 204));
        deleteBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        deleteBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\asusx\\OneDrive\\Desktop\\Project_Pic\\delete.png")); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("Customer ID");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("C Name");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setText("C Number");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel10.setText("Product 1");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "    ", "Celebration Cake", "Cupcake", "Gateau Cake", "Desserts", "Beverages", "Sri Lankan Corner" }));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel11.setText("Quantity");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel14.setText("Price");

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel15.setText("Total ");

        searchCus.setBackground(new java.awt.Color(204, 204, 255));
        searchCus.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        searchCus.setText("S");
        searchCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCusActionPerformed(evt);
            }
        });

        S1Pro.setBackground(new java.awt.Color(204, 204, 255));
        S1Pro.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        S1Pro.setText("S");
        S1Pro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                S1ProActionPerformed(evt);
            }
        });

        Cal.setBackground(new java.awt.Color(204, 204, 255));
        Cal.setFont(new java.awt.Font("Times New Roman", 0, 10)); // NOI18N
        Cal.setText("Cal");
        Cal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel16.setText("Payment");

        cmbPayMeth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   ", "Cash", "Credit" }));

        jLabel17.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel17.setText("Status");

        cmbPayStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "  ", "Paid", "Unpaid" }));

        jLabel18.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel18.setText("Id Order-Item");

        jLabel19.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel19.setText("Cake ID");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 8)); // NOI18N
        jLabel5.setText("YYYY-MM-DD");

        jButton1.setBackground(new java.awt.Color(255, 204, 204));
        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\asusx\\OneDrive\\Desktop\\Project_Pic\\exit.png")); // NOI18N
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userId, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CNum)
                                    .addComponent(orderID)
                                    .addComponent(cmbCakeStz, 0, 143, Short.MAX_VALUE)
                                    .addComponent(cId)
                                    .addComponent(cName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchCus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(updateBtn)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(deleteBtn)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idOrderItem, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(price1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cakeID, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbPayMeth, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Cal, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1)
                                        .addGap(33, 33, 33)))
                                .addGap(64, 64, 64))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(S1Pro, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cmbPayStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(viewBtn)
                        .addGap(48, 48, 48)
                        .addComponent(clrBtn)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(359, 359, 359)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(orderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmbCakeStz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(price1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(S1Pro, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(cakeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(userId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(idOrderItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(orderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchCus))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Cal))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(cmbPayMeth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(cmbPayStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addGap(58, 125, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateBtn)
                            .addComponent(addBtn)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clrBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(43, 43, 43))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void orderIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderIDActionPerformed

    private void clrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clrBtnActionPerformed
        // Clear the text fields
        cId.setText("");
        cName.setText("");
        CNum.setText("");
        orderID.setText("");
        total.setText("");
        userId.setText("");
        idOrderItem.setText("");
        price1.setText("");
        cakeID.setText("");
        orderDate.setText("");

    // Reset the combo box to default value
       cmbCakeStz.setSelectedIndex(0);
       jComboBox1.setSelectedIndex(0);
       cmbPayMeth.setSelectedIndex(0);
       cmbPayStatus.setSelectedIndex(0);
    
    //Reset the spinner value
        jSpinner1.setValue(0);
    }//GEN-LAST:event_clrBtnActionPerformed

    private void searchCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCusActionPerformed
        try {
            int cusID = Integer.parseInt(cId.getText()); // Get the customer ID from the input field
            Customer cus = controller.getCustomerById(cusID); // Use the controller to fetch the customer

            if (cus != null) {
                cName.setText(cus.getName()); // Set the name field with the fetched customer name
                CNum.setText(String.valueOf(cus.getContactDetails())); // Set the contact details field
            } else {
                JOptionPane.showMessageDialog(this, "Customer not found."); // Show a message if customer is not found
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid customer ID."); // Handle case where the input isn't a valid number
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage()); // Catch any other unexpected exceptions
    }
   
    }//GEN-LAST:event_searchCusActionPerformed

    private void S1ProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_S1ProActionPerformed
         try {
            int idCake = Integer.parseInt(cakeID.getText()); // Get the input from the text field

    // Create an instance of ProductController
            ProductController productController = new ProductController();

    // Get the product by ID
            Product cake = productController.getProductById(idCake);

            if (cake != null) {
                jComboBox1.setSelectedItem(cake.getCategory());
                price1.setText(String.valueOf(cake.getPrice()));
            } else {
                JOptionPane.showMessageDialog(null, "Cake ID not found.");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter a valid Cake ID.");
        }
    }//GEN-LAST:event_S1ProActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
       try {
        // Retrieve data from form inputs
        int orderId = Integer.parseInt(orderID.getText());
        String status = (String)cmbCakeStz.getSelectedItem();
        float Total = Float.parseFloat(total.getText());
        int userI = Integer.parseInt(userId.getText());
        String payMethod = (String)cmbPayMeth.getSelectedItem();
        String payStatus = (String)cmbPayStatus.getSelectedItem();
        
        // Create a new Order object
        Order order = new Order(orderId, status, Total, userI, payMethod, payStatus);
        
        //Order Item 
        int OrderItemID = Integer.parseInt (idOrderItem.getText());
        int quantity1 = (Integer) jSpinner1.getValue();
        float Price1 = Float.parseFloat(price1.getText());
        int Cakeid = Integer.parseInt (cakeID.getText());
        
        OrderItem orderItem = new OrderItem(OrderItemID, quantity1, Price1, orderId, Cakeid);
        
        
        //Customer
        int customerID = Integer.parseInt(cId.getText());

        Customer_DAO customerDAO = new Customer_DAO();
        Customer existingCustomer = customerDAO.getCustomerById(customerID);

        if (existingCustomer == null) {
        // Customer doesn't exist, add new customer
            String customerName = cName.getText();
            int customerNum = Integer.parseInt(CNum.getText());
            Customer customer = new Customer(customerID, customerName, customerNum);

        // Add the new customer to the database
            if (!customerDAO.addCustomer(customer)) {
                JOptionPane.showMessageDialog(this, "Error adding customer details.");
                return; // Exit the method to avoid proceeding with invalid data
            }
        }
        
        //Place Order
        LocalDate Date = null;  // Expiry as LocalDate
        String expiryText = orderDate.getText();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd"); // Use the format that matches your input
        try {
            Date = LocalDate.parse(expiryText, formatter);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid expiry date format. Please use yyyy-MM-dd.");
            return; // Exit the method to avoid proceeding with invalid data
        }
        
        PlaceOrder placeOrder = new PlaceOrder(Date, orderId, customerID);
        
        Order_DAO orderDAO = new Order_DAO();
        PlaceOrder_DAO placeOrderDAO = new PlaceOrder_DAO();
        OrderItem_DAO orderItemDAO = new OrderItem_DAO();
        //Customer_DAO customerDAO = new Customer_DAO();

       // if (customerDAO.addCustomer(customer) && orderDAO.addOrder(order) && placeOrderDAO.addPlaceOrder(placeOrder) && orderItemDAO.addOrderItem(orderItem)) {
        if ( orderDAO.addOrder(order) && placeOrderDAO.addPlaceOrder(placeOrder) && orderItemDAO.addOrderItem(orderItem)) {
            JOptionPane.showMessageDialog(this, "Order and related details added successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Error adding order and details.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
       
        InvoiceForm invoice = new InvoiceForm();
        invoice.setVisible(true);  // Show the new form
    }//GEN-LAST:event_addBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        try {
    // Retrieve data from form inputs
            int orderId = Integer.parseInt(orderID.getText());
            String status = (String) cmbCakeStz.getSelectedItem();
           float Total = Float.parseFloat(total.getText());
            int userI = Integer.parseInt(userId.getText());
            String payMethod = (String) cmbPayMeth.getSelectedItem();
            String payStatus = (String) cmbPayStatus.getSelectedItem();

    // Order Item 
            int OrderItemID = Integer.parseInt(idOrderItem.getText());
            int quantity1 = (Integer) jSpinner1.getValue();
            float Price1 = Float.parseFloat(price1.getText());
            int Cakeid = Integer.parseInt(cakeID.getText());

    // Customer
            int customerID = Integer.parseInt(cId.getText());
            String customerName = cName.getText();
            int customerNum = Integer.parseInt(CNum.getText());

    // Place Order
            LocalDate Date = null;  // Expiry as LocalDate
            String expiryText = orderDate.getText();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd"); // Use the format that matches your input
            try {
                Date = LocalDate.parse(expiryText, formatter);
            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, "Invalid expiry date format. Please use yyyy-MM-dd.");
                return; // Exit the method to avoid proceeding with invalid data
            }

    // Update order, customer, and order item
            Order order = new Order(orderId, status, Total, userI, payMethod, payStatus);
            Customer customer = new Customer(customerID, customerName, customerNum);  // Assuming customerId is tied to orderId
            OrderItem orderItem = new OrderItem(OrderItemID, quantity1, Price1, orderId, Cakeid);
            PlaceOrder placeOrder = new PlaceOrder(Date, userI, customerID);

    // Instantiate DAO objects
            Order_DAO orderDAO = new Order_DAO();
            PlaceOrder_DAO placeOrderDAO = new PlaceOrder_DAO();
            OrderItem_DAO orderItemDAO = new OrderItem_DAO();
            Customer_DAO customerDAO = new Customer_DAO();

    // Call DAO update methods and check their return values
            boolean isOrderUpdated = orderDAO.updateOrder(orderId, status, Total, userI, payMethod, payStatus);
            if (!isOrderUpdated) {
                JOptionPane.showMessageDialog(this, "Failed to update the order.");
            }

            boolean isPlaceOrderUpdated = placeOrderDAO.updatePlaceOrder(Date, userI, customerID);
            if (!isPlaceOrderUpdated) {
                JOptionPane.showMessageDialog(this, "Failed to update the place order.");
            }

            boolean isOrderItemUpdated = orderItemDAO.updateOrderItem(orderItem);
            if (!isOrderItemUpdated) {
                JOptionPane.showMessageDialog(this, "Failed to update the order item.");
            }

            boolean isCustomerUpdated = customerDAO.updateCustomer(customer);
            if (!isCustomerUpdated) {
                JOptionPane.showMessageDialog(this, "Failed to update the customer details.");
            }

    // Check if all updates are successful
            if (isOrderUpdated && isPlaceOrderUpdated && isOrderItemUpdated && isCustomerUpdated) {
                JOptionPane.showMessageDialog(this, "Order and related details updated successfully!");
            } else {
                 JOptionPane.showMessageDialog(this, "Error updating order and details.");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid input: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        try {
                // Check if Order ID is empty
            String orderIdText = orderID.getText();
            if (orderIdText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Order ID cannot be empty.");
                return;
            }

            // Parse Order ID to int
            int orderId = Integer.parseInt(orderIdText);

            // Retrieve Order by Order ID
            Order order = controller.getOrderById(orderId);

                // Check if order exists
            if (order != null) {
                    // Set Order details in the form
                cmbCakeStz.setSelectedItem(order.getStatus());
                userId.setText(String.valueOf(order.getUserID()));
                total.setText(String.valueOf(order.getAmount()));
                cmbPayMeth.setSelectedItem(order.getPaymentMethod());
                cmbPayStatus.setSelectedItem(order.getPayStatus());

                    // Retrieve and display PlaceOrder details
                PlaceOrder placeOrder = controller.getPlaceOrderByOrderId(orderId);
                if (placeOrder != null) {
                    
                    
                LocalDate orderDateValue = placeOrder.getOrderDate(); // Assuming this returns a LocalDate
                if (orderDateValue != null) {
                    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd"); // Change format as needed
                    orderDate.setText(orderDateValue.format(dateFormatter));    
                } else {
                    orderDate.setText("N/A");
                }

                int customerId = placeOrder.getCustomerID();
                Customer customer = controller.getCustomerById(customerId);

                if (customer != null) {
                    cId.setText(String.valueOf(customer.getCustomerID()));
                    cName.setText(customer.getName());
                    CNum.setText(String.valueOf(customer.getContactDetails()));
                } else {
                    JOptionPane.showMessageDialog(this, "Customer not found for this order.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Place order not found for this order.");
            }

                // Retrieve and display OrderItem details
            List<OrderItem> orderItems = controller.getOrderItemsByOrderID(orderId);
            if (orderItems != null && !orderItems.isEmpty()) {
                OrderItem orderItem = orderItems.get(0);  // Example of accessing the first item
                idOrderItem.setText(String.valueOf(orderItem.getOrderItem()));
                jSpinner1.setValue(orderItem.getQuantity());
                price1.setText(String.valueOf(orderItem.getPrice()));
                cakeID.setText(String.valueOf(orderItem.getIdCake()));
            } else {
                JOptionPane.showMessageDialog(this, "Order items not found for this order.");
            }
            } else {
                JOptionPane.showMessageDialog(this, "Order not found.");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Order ID.");
        } catch (Exception e) {
             JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        try {
        
        String orderIdText = orderID.getText();
        
        if (orderIdText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Order ID cannot be empty.");
            return;
        }
        
        int orderId = Integer.parseInt(orderIdText);

        // Call the controller method to delete the order and its related entries
        boolean isDeleted = controller.deleteOrder(orderId);
        
        if (isDeleted) {
            JOptionPane.showMessageDialog(this, "Order deleted successfully.");
            // Optionally refresh the UI or table to reflect the deletion
        } else {
            JOptionPane.showMessageDialog(this, "Order not found.");
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid Order ID.");
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
    }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void CalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalActionPerformed
          try {
                // Check if price1 field is empty
            if (price1.getText().isEmpty()) {
                total.setText("Price is empty");
                return;
            }

                // Parse price and quantity
            float price = Float.parseFloat(price1.getText());
            int quantity = (Integer) jSpinner1.getValue();

                // Calculate total
            float Total = price * quantity;
            
                // Display the total in the totalTextField
            total.setText(String.format("%.2f", Total));
        } catch (NumberFormatException ex) {
                // Handle invalid input in case of non-numeric price
            total.setText("Invalid input");
        }

    }//GEN-LAST:event_CalActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();  
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CNum;
    private javax.swing.JButton Cal;
    private javax.swing.JButton S1Pro;
    private javax.swing.JButton addBtn;
    private javax.swing.JTextField cId;
    private javax.swing.JTextField cName;
    private javax.swing.JTextField cakeID;
    private javax.swing.JButton clrBtn;
    private javax.swing.JComboBox<String> cmbCakeStz;
    private javax.swing.JComboBox<String> cmbPayMeth;
    private javax.swing.JComboBox<String> cmbPayStatus;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField idOrderItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField orderDate;
    private javax.swing.JTextField orderID;
    private javax.swing.JTextField price1;
    private javax.swing.JButton searchCus;
    private javax.swing.JTextField total;
    private javax.swing.JButton updateBtn;
    private javax.swing.JTextField userId;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables

    
}
